(module github.com/oftlisp/docs/design/types/annoying-cases)

(defn (addition)
  (+) ; This is effectively of the type Num a => a, in Haskell terminology.
  ; No matter what type the return value is resolved to be, it is equal to
  ; zero. (All numeric types have a zero, of course, so this is easy.)

  (+ 1 1/2) ; 1 is a fixnum, 1/2 is a ratio. This should return a ratio.

  (+ 1 2+3i) ; fixnums (e.g. 1) do not convert directly to complexes (i.e.
  ; 2+3i), but instead need to be converted to ratios first.

  (+ 1/2 1.9) ; This should fail -- a ratio cannot be implicitly converted to a
  ; float (because it could lose precision), so the ratio should be explicitly
  ; casted to a float, i.e. with (float<-ratio 1/2).

  (+ 1 1 1) ; The + function can take any number of arguments. (apply + l)
  ; should result in the same value as (fold + l).

  (+ 0 1 1/2 1/3+1/4i)) ; Multiple conversions, yay fun! Should return a crational.
